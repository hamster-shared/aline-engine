// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/api/aline.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlineRPCClient is the client API for AlineRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlineRPCClient interface {
	AlineChat(ctx context.Context, opts ...grpc.CallOption) (AlineRPC_AlineChatClient, error)
}

type alineRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAlineRPCClient(cc grpc.ClientConnInterface) AlineRPCClient {
	return &alineRPCClient{cc}
}

func (c *alineRPCClient) AlineChat(ctx context.Context, opts ...grpc.CallOption) (AlineRPC_AlineChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlineRPC_ServiceDesc.Streams[0], "/api.AlineRPC/AlineChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &alineRPCAlineChatClient{stream}
	return x, nil
}

type AlineRPC_AlineChatClient interface {
	Send(*AlineMessage) error
	Recv() (*AlineMessage, error)
	grpc.ClientStream
}

type alineRPCAlineChatClient struct {
	grpc.ClientStream
}

func (x *alineRPCAlineChatClient) Send(m *AlineMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *alineRPCAlineChatClient) Recv() (*AlineMessage, error) {
	m := new(AlineMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlineRPCServer is the server API for AlineRPC service.
// All implementations must embed UnimplementedAlineRPCServer
// for forward compatibility
type AlineRPCServer interface {
	AlineChat(AlineRPC_AlineChatServer) error
	mustEmbedUnimplementedAlineRPCServer()
}

// UnimplementedAlineRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAlineRPCServer struct {
}

func (UnimplementedAlineRPCServer) AlineChat(AlineRPC_AlineChatServer) error {
	return status.Errorf(codes.Unimplemented, "method AlineChat not implemented")
}
func (UnimplementedAlineRPCServer) mustEmbedUnimplementedAlineRPCServer() {}

// UnsafeAlineRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlineRPCServer will
// result in compilation errors.
type UnsafeAlineRPCServer interface {
	mustEmbedUnimplementedAlineRPCServer()
}

func RegisterAlineRPCServer(s grpc.ServiceRegistrar, srv AlineRPCServer) {
	s.RegisterService(&AlineRPC_ServiceDesc, srv)
}

func _AlineRPC_AlineChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlineRPCServer).AlineChat(&alineRPCAlineChatServer{stream})
}

type AlineRPC_AlineChatServer interface {
	Send(*AlineMessage) error
	Recv() (*AlineMessage, error)
	grpc.ServerStream
}

type alineRPCAlineChatServer struct {
	grpc.ServerStream
}

func (x *alineRPCAlineChatServer) Send(m *AlineMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *alineRPCAlineChatServer) Recv() (*AlineMessage, error) {
	m := new(AlineMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlineRPC_ServiceDesc is the grpc.ServiceDesc for AlineRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlineRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AlineRPC",
	HandlerType: (*AlineRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AlineChat",
			Handler:       _AlineRPC_AlineChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/api/aline.proto",
}
